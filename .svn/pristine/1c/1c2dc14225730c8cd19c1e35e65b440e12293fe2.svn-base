package com.fan.framework.imageloader;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.TimeUnit;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Looper;
import android.support.v4.util.LruCache;
import android.widget.ImageView;

import com.fan.framework.R;
import com.fan.framework.base.FFActivity;
import com.fan.framework.utils.FFImageUtil;
import com.fan.framework.utils.FFThreadPool;
import com.fan.framework.utils.FileUitl;
import com.fan.framework.utils.FFLogUtil;
import com.fan.framework.widgets.ZoomImageView;

/**
 * 创建日期2013-1-21下午3:29:55<br/>
 * 作用描述：异步载入网络下发的图片
 */
@SuppressLint("NewApi")
public class FFImageLoader {
	static int size = (int) (Runtime.getRuntime().maxMemory() / 4);
	public final static LruCache<String, Bitmap> map = new LruCache<String, Bitmap>(
			size) {
		@Override
		protected int sizeOf(String key, Bitmap bitmap) {
			if (bitmap != null) {
				return bitmap.getRowBytes() * bitmap.getHeight();
			} else {
				return 0;
			}
		}
	};

	private final static ExecutorService es_sd;
	private static ExecutorService es_net;
	public final static int thrads = 1;
	static{
		if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2){
		es_sd = new FFThreadPool(thrads, thrads,
	            0L, TimeUnit.MILLISECONDS,
	            new LinkedBlockingDeque<Runnable>());
		es_net = new FFThreadPool(thrads, thrads,
	            0L, TimeUnit.MILLISECONDS,
	            new LinkedBlockingDeque<Runnable>());
		}
		else{
			es_sd = Executors.newFixedThreadPool(thrads);
			es_net = Executors.newFixedThreadPool(thrads);
		}
	}
	private static final FFImageRequestQueue queue_sd = new FFImageRequestQueue();
	private static final FFImageRequestQueue queue_net = new FFImageRequestQueue();
	private static final String TAG = "FFImageLoader";

	/**
	 * @param activity
	 *            当前请求所在activity
	 * @param imageUrl
	 *            图片网络地址
	 * @param imageView
	 *            图片要显示的目标imageView
	 * @param doCache
	 *            是否缓存当前图片到sd卡 如果设为false则仅从缓存中获取
	 * @param width
	 *            图片的最大宽度 如果不需要限制 请设置为-1
	 * @param height
	 *            图片的最大高度 如果不需要限制 请设置为-1
	 * @param defaultResId
	 *            如果缓存中不存在该图片默认显示的图片id 如果不需要默认显示图片请设为0
	 * @param isRound
	 *            是否是圆形图片
	 * @param callBack
	 *            回调方法
	 */
	public static FFImageRequest load_base(FFActivity activity,
			String imageUrl, ImageView imageView, boolean doCache, int width,
			int height, int defaultResId, boolean isRound,
			FFImageCallBack callBack) {
		FFImageRequest request = new FFImageRequest(imageUrl, imageView, doCache,
						width, height, callBack, activity, isRound, defaultResId);
		loadDrawable(request);
		return request;

	}

	/**
	 * 创建日期2012-12-26 下午12:47:57 描述：按顺序加载所有图片
	 * @param request
	 * @return
	 */
	private static void loadDrawable(final FFImageRequest request) {
		FFLogUtil.e("-------", request.getImageUrl() + "开始加载");
		if (request.getImageUrl() == null) {
			request.setImageUrl("");
		}
		
		if (loadFromCache(request)) {
			return;
		}
		if (request.getDefaultResId() != 0 && request.isNeedRefresh()) {
			setDefultResource(request);
		} else if (request.isNeedRefresh()) {
			ImageView imageView = request.getImageView();
			if (imageView != null) {
				imageView.setImageBitmap(null);
			}
		}
		if (request.isDoCache()&&loadFromSDCard(request)) {
			return;
		}
		if (loadFromSDCard(request)) {
			FFLogUtil.i(TAG, "从SD卡加载到图片");
			return;
		}
		loadFromNet(request);
		return;
	}

	/**
	 * 从网络加载图片
	 * @param request
	 * @return 返回图片
	 */
	private static Bitmap loadImageFromUrl(final FFImageRequest request) {
		final File file = getTempFile(request.getImageUrl());

		new Thread() {
			public void run() {
				trimToSize(file.getParentFile(), 31457280);
			}
		}.start();
		boolean sdFreeEnough = FileUitl.isSdFreeEnough();
		Bitmap bitmap = null;
		int retryTimes = 0;
		while (bitmap == null && retryTimes < 3) {
			if(retryTimes > 0){
				FFLogUtil.e("网络下载图片", "第"+retryTimes+"次重试");
			}
			retryTimes++;
			try {
				URL u = new URL(request.getImageUrl());
				URLConnection conn = u.openConnection();
				conn.setConnectTimeout(10000);
				conn.connect();
				if(request.getCallBack() != null){
					request.getCallBack().onProgress(0, 10);
				}
				InputStream is = conn.getInputStream();
				int fileSize = conn.getContentLength();
				int downloadSize = 0;
				if (fileSize < 1 || is == null) {
					request.setStatus(404);
				} else {
					if(request.getCallBack() != null){
						request.getCallBack().onProgress(0, fileSize);
					}
					if(FileUitl.isSDCardAvailable() && sdFreeEnough){
						FileOutputStream fos = new FileOutputStream(file);
						byte[] bytes = new byte[1024];
						int len = -1;
						while ((len = is.read(bytes)) != -1) {
							fos.write(bytes, 0, len);
							downloadSize += len;
							if(request.getCallBack() != null){
								request.getCallBack()
										.onProgress(downloadSize, fileSize);
							}
						}
						is.close(); 
						fos.close();
						bitmap = FFImageUtil.bitmapFromPath(file.getPath(),
								request.getWidth(), request.getHeight());
						file.renameTo(getFile(request.getImageUrl()));
					}
					else{
						ByteArrayOutputStream swapStream = new ByteArrayOutputStream();
						byte[] buff = new byte[1024];
						int rc = 0;
						while ((rc = is.read(buff)) > 0) {
							swapStream.write(buff, 0, rc);
							downloadSize += rc;
							if(request.getCallBack() != null){
								request.getCallBack()
										.onProgress(downloadSize, fileSize);
							}
						}
						is.close();
						swapStream.close();
						bitmap = FFImageUtil.bitmapFromByte(swapStream.toByteArray(), request.getWidth(), request.getHeight());
						if(request.getCallBack() != null){
							request.getCallBack()
									.onProgress(100, 100);
						}
//						bitmap = FFImageUtil.bitmapFromStream(is, request.getWidth(), request.getHeight());
					}

					if (bitmap != null) {
						request.setStatus(200);
						if (request.isRound()) {
							bitmap = FFImageUtil.getCornerBitmap(bitmap);
						}
						synchronized (map) {
							// if(map.size() > 2000){
					 		// refreshCache();
							// }
							map.put(request.getCacheKey(), bitmap);
						}
					}
				}
			} catch (Exception e) {
				if(e instanceof FileNotFoundException){
					request.setStatus(404);
				}
				e.printStackTrace();
				FFLogUtil.e("网络下载图片File", e);
				if(retryTimes < 3){
					return bitmap;
				}
			}
		}
		if(bitmap == null){
			FFLogUtil.e("网络下载图片", "擦！ 图片竟然没来由的为空");
		}
		return bitmap;
	}

	/**
	 * 根据图片url获取文件
	 * 
	 * @param url
	 * @return
	 */
	public static File getFile(String url) {
		return new File(FileUitl.getCacheFileWithCheck(url));
	}
	/**
	 * 根据图片url获取文件
	 * 
	 * @param url
	 * @return
	 */
	public static File getTempFile(String url) {
		return new File(FileUitl.getTempFileWithCheck(url));
	}

	/**
	 * 结束加载
	 * 
	 * @param request
	 * @param s
	 * @param isCallback
	 */
	private static void endLoad(final FFImageRequest request, final Bitmap s,
			final boolean isCallback) {
		if (checkTag(request)) {
			if (Looper.myLooper() != Looper.getMainLooper()) {
				((Activity) request.getActivity())
						.runOnUiThread(new Runnable() {
							@Override
							public void run() {
								endLoad_onUiThread(request, s, isCallback);
							}
						});
			} else {
				endLoad_onUiThread(request, s, isCallback);
			}
		}
	}

	/**
	 * 结束加载
	 * 
	 * @param request
	 * @param bitmap
	 * @param isCallback
	 */
	private static void endLoad_onUiThread(final FFImageRequest request,
			final Bitmap bitmap, boolean isCallback) {
		if (bitmap == null) {
			FFLogUtil.e("status", request.getStatus() + "");
		}
		if (request.getCallBack() != null) {
			request.getCallBack().imageLoaded(bitmap, request.getImageUrl());
		}
		if (request.getImageView() != null) {
			if (bitmap == null) {
				int failedResId = request.getFailedResId(request.getStatus());
				if(failedResId != 0){
					request.getImageView().setImageResource(failedResId);
				}
				else if (request.getDefaultResId() != 0) {
					request.getImageView().setImageResource(
							request.getDefaultResId());
				} else {
					request.getImageView().setImageBitmap(null);
				}
			} else {
				ImageView iv = request.getImageView();
				if (isCallback) {
					if (iv instanceof ZoomImageView) {
						((ZoomImageView) iv).setImageBitmap1(bitmap);
					} else {
						iv.setImageBitmap(bitmap);
					}
				} else {
					iv.setImageBitmap(bitmap);
				}
			}
		}
	}

	/**
	 * 结束加载
	 * 
	 * @param request
	 */
	private static void setDefultResource(final FFImageRequest request) {
		if (request.getImageView() != null) {
			request.getImageView().setImageResource(request.getDefaultResId());
		}
	}

	/**
	 * 检查当前请求的图片是否已经改变目标图片
	 * @param request
	 * @return
	 */
	private static boolean checkTag(FFImageRequest request) {
		if (request.getImageView() != null) {
			return request.getImageUrl().equals(
					request.getImageView().getTag(R.id.tag_imageLoader));
		}
		return true;
	}

	/**
	 * 尝试从缓存中加载
	 * @param request
	 * @return
	 */
	private static boolean loadFromCache(FFImageRequest request) {
		Bitmap s = map.get(request.getCacheKey());
		if (s != null) {
			endLoad(request, s, false);
			FFLogUtil.i(TAG, "从缓存中加载到图片");
			return true;
		}
		FFLogUtil.i(TAG, "缓存中没有图片");
		return false;
	}

	/**
	 * 添加一个从sd卡加载图片的任务
	 * @param request
	 * @return 是否有此文件
	 */
	private static boolean loadFromSDCard(final FFImageRequest request) {
		// if (FFConfig.isSdcardExists()) {
		final File file = getFile(request.getImageUrl());
		boolean exists = file.exists();
		if (file != null && exists) {
			synchronized (queue_sd) {
				if (queue_sd.containsKey(request.getCacheKey())) {
					queue_sd.add(request.getCacheKey(), request);
					return true;
				}
				queue_sd.addQueue(request.getCacheKey(), request);
			}
			es_sd.submit(new Runnable() {
				public void run() {
					synchronized (queue_sd) {
						if (FFImageLoader.isAllFinished(request, queue_sd,
								request.getCacheKey())) {
							return;
						}
					}
					boolean hasRound = FFImageLoader.hasRound(request,
							queue_sd, request.getCacheKey());
					boolean hasNormal = FFImageLoader.hasIsNotRound(request,
							queue_sd, request.getCacheKey());
					final Bitmap bitmap_Round = hasRound ? FFImageUtil
							.getCornerBitmap(FFImageUtil.bitmapFromPath(
									file.getPath(), request.getWidth(),
									request.getHeight())) : null;
					final Bitmap bitmap_normal = hasNormal ? FFImageUtil
							.bitmapFromPath(file.getPath(), request.getWidth(),
									request.getHeight()) : null;
					if (bitmap_Round == null && bitmap_normal == null) {
						file.delete();
						((Activity) request.getActivity())
								.runOnUiThread(new Runnable() {

									@Override
									public void run() {
										FFImageLoader.loadFromNet(request);
									}
								});
						return;
					}
					synchronized (map) {
						// if(map.putCount() > 2000){
						// refreshCache();
						// }
						map.put(request.getCacheKey(),
								request.isRound() ? bitmap_Round
										: bitmap_normal);
					}
					((Activity) request.getActivity())
							.runOnUiThread(new Runnable() {

								@Override
								public void run() {

									synchronized (queue_sd) {
										ArrayList<FFImageRequest> list = queue_sd
												.getQueue(request.getCacheKey());
										for (FFImageRequest ffImageRequest : list) {
											ffImageRequest.setStatus(request
													.getStatus());
											if (ffImageRequest.getActivity()
													.getDestroyed()) {
												continue;
											}

											if (!checkTag(ffImageRequest)) {
												continue;
											}

											endLoad(ffImageRequest,
													ffImageRequest.isRound() ? bitmap_Round
															: bitmap_normal,
													true);
										}
										queue_sd.remove(request.getCacheKey());
									}
								}
							});
				}
			});
			return true;
		}
		// }
		return false;
	}

	/**
	 * 添加一个从网络加载图片的任务
	 * @param request
	 */
	private static void loadFromNet(final FFImageRequest request) {
		FFLogUtil.i(TAG, "从网络加载图片");
		synchronized (queue_net) {
			if(request.getCallBack() != null){
				request.getCallBack().onProgress(0, 100);
			}
			if (queue_net.containsKey(request.getImageUrl())) {
				queue_net.add(request.getImageUrl(), request);
				return;
			}
			queue_net.addQueue(request.getImageUrl(), request);
		}
		es_net.submit(new Runnable() {
			public void run() {
				synchronized (queue_net) {
					if (FFImageLoader.isAllFinished(request, queue_net,
							request.getImageUrl())) {
						return;
					}
				}
				final Bitmap bitmap = loadImageFromUrl(request);
				((Activity) request.getActivity())
						.runOnUiThread(new Runnable() {

							@Override
							public void run() {
								synchronized (queue_net) {
									ArrayList<FFImageRequest> list = queue_net
											.getQueue(request.getImageUrl());
									for (FFImageRequest ffImageRequest : list) {
										ffImageRequest.setStatus(request
												.getStatus());
										if (ffImageRequest.getActivity()
												.getDestroyed()) {
											continue;
										}
										if (!checkTag(ffImageRequest)) {
											continue;
										}
										if (bitmap == null) {
											endLoad(ffImageRequest, bitmap,
													true);
											continue;
										}
										if (ffImageRequest.getCacheKey()
												.equals(request.getCacheKey())) {
											endLoad(ffImageRequest, bitmap,
													true);
										} else {
											loadFromSDCard(ffImageRequest);
										}
									}
									queue_net.remove(request.getImageUrl());
								}
							}
						});
			}
		});
	}

	/**
	 * 清除内存中的图片缓存
	 */
	public static void cleanCache() {
		map.trimToSize(0);
	}

	private static boolean isAllFinished(FFImageRequest request,
			FFImageRequestQueue queue, String key) {
		ArrayList<FFImageRequest> list = queue.getQueue(key);
		for (FFImageRequest ffImageRequest : list) {
			if (!ffImageRequest.getActivity().getDestroyed()
					&& checkTag(ffImageRequest)) {
				return false;
			}
		}
		queue.remove(key);
		return true;
	}

	private static boolean hasRound(FFImageRequest request,
			FFImageRequestQueue queue, String key) {
		ArrayList<FFImageRequest> list = queue.getQueue(key);
		for (FFImageRequest ffImageRequest : list) {
			if (ffImageRequest.isRound()) {
				return true;
			}
		}
		return false;
	}

	private static boolean hasIsNotRound(FFImageRequest request,
			FFImageRequestQueue queue, String key) {
		ArrayList<FFImageRequest> list = queue.getQueue(key);
		for (FFImageRequest ffImageRequest : list) {
			if (!ffImageRequest.isRound()) {
				return true;
			}
		}
		return false;
	}

	static boolean isTremimg = false;
	
	public static int trimToSize(int maxSize){
		return trimToSize(getFile("example").getParentFile(), maxSize);
	}

	private static int trimToSize(File file_parent, final int maxSize) {
		if (isTremimg) {
			return 0;
		}
		if(file_parent == null){
			return 0;
		}
		File[] f = file_parent.listFiles();
		if(f == null){
			return 0;
		}
		isTremimg = true;
		long[] time = new long[f.length];
		long sum = 0;
		for (int i = 0; i < f.length; i++) {
			sum += f[i].length();
			time[i] = f[i].lastModified();
		}
		final int sum_cache = (int) sum;
		if (sum < maxSize) {
			isTremimg = false;
			return 0;
		}
		if (maxSize != 0) {
			for (int i = 0; i < f.length; i++) {
				for (int j = 0; j < f.length; j++) {
					if (time[i] < time[j]) {
						File file = f[i];
						f[i] = f[j];
						f[j] = file;

						long temp = time[i];
						time[i] = time[j];
						time[j] = temp;
					}
				}
			}
		}
		for (File file : f) {
			if (sum < maxSize) {
				break;
			}
			if (file.isDirectory()) {
				continue;
			}
			sum -= file.length();
			file.delete();
		}
		isTremimg = false;
		return sum_cache / 1024 / 1024;
	}
}
